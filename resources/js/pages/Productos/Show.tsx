import { useAppMode } from '@/contexts/AppModeContext';
import DashboardLayout from '@/layouts/DashboardLayout';
import { Head } from '@inertiajs/react';
import { ShowHeader, InfoCard } from '@/components/Show';

interface Producto {
    id: number;
    cod_producto: string;
    nombre: string;
    descripcion?: string;
    precio_compra: number;
    precio_venta: number;
    imagen?: string;
    categoria: {
        id: number;
        nombre: string;
    };
    promociones?: Array<{
        id: number;
        nombre: string;
        descuento: number;
    }>;
    inventarios?: Array<{
        id: number;
        stock: number;
        almacen: {
            id: number;
            nombre: string;
        };
    }>;
    stock_total?: number;
    created_at: string;
    updated_at: string;
}

interface ProductoShowProps {
    producto: Producto;
}

export default function ProductoShow({ producto }: ProductoShowProps) {
    const { settings } = useAppMode();

    const getTextByMode = (textos: { ni√±os: string; j√≥venes: string; adultos: string }) => {
        return textos[settings.ageMode as keyof typeof textos] || textos.adultos;
    };

    const getModeClasses = () => {
        switch (settings.ageMode) {
            case 'ni√±os':
                return 'font-comic text-adaptive-kids';
            case 'j√≥venes':
                return 'font-modern text-adaptive-teen';
            default:
                return 'font-classic text-adaptive-adult';
        }
    };

    const formatPrice = (precio: number) => {
        return new Intl.NumberFormat('es-CO', {
            style: 'currency',
            currency: 'COP',
        }).format(precio);
    };

    const getStockTotal = () => {
        if (producto.stock_total !== undefined) {
            return producto.stock_total;
        }
        return producto.inventarios?.reduce((total, inv) => total + inv.stock, 0) || 0;
    };

    const stockTotal = getStockTotal();

    // Configuraci√≥n de campos para InfoCard
    const infoBasicaFields = [
        {
            label: getTextByMode({
                ni√±os: 'üì¶ Producto',
                j√≥venes: 'üì¶ Producto',
                adultos: 'Nombre del Producto',
            }),
            value: (
                <div className="flex items-center space-x-3">
                    <span className="font-medium">{producto.nombre}</span>
                </div>
            ),
            span: 2 as const
        },
        {
            label: getTextByMode({
                ni√±os: 'üè∑Ô∏è C√≥digo',
                j√≥venes: 'üè∑Ô∏è C√≥digo',
                adultos: 'C√≥digo de Producto',
            }),
            value: producto.cod_producto
        },
        {
            label: getTextByMode({
                ni√±os: 'üìÇ Categor√≠a',
                j√≥venes: 'üìÇ Categor√≠a',
                adultos: 'Categor√≠a',
            }),
            value: producto.categoria.nombre
        }
    ];

    // Si tiene descripci√≥n, agregarla
    if (producto.descripcion) {
        infoBasicaFields.push({
            label: getTextByMode({
                ni√±os: 'üìù Descripci√≥n',
                j√≥venes: 'üìù Descripci√≥n',
                adultos: 'Descripci√≥n',
            }),
            value: <span>{producto.descripcion}</span>,
            span: 2 as const
        });
    }

    const precioPrecioFields = [
        {
            label: getTextByMode({
                ni√±os: 'üí∞ Precio de Compra',
                j√≥venes: 'üí∞ Precio de Compra',
                adultos: 'Precio de Compra',
            }),
            value: formatPrice(producto.precio_compra)
        },
        {
            label: getTextByMode({
                ni√±os: 'üí≤ Precio de Venta',
                j√≥venes: 'üí≤ Precio de Venta',
                adultos: 'Precio de Venta',
            }),
            value: (
                <span className="text-xl font-bold text-green-600 dark:text-green-400">
                    {formatPrice(producto.precio_venta)}
                </span>
            )
        }
    ];

    const stockTotalFields = [
        {
            label: getTextByMode({
                ni√±os: 'üéØ Stock Total',
                j√≥venes: 'üìä Stock Total',
                adultos: 'Stock Total',
            }),
            value: (
                <span className={`text-xl font-bold ${
                    stockTotal > 10
                        ? 'text-green-600 dark:text-green-400'
                        : stockTotal > 5
                          ? 'text-yellow-600 dark:text-yellow-400'
                          : 'text-red-600 dark:text-red-400'
                }`}>
                    {stockTotal} {getTextByMode({
                        ni√±os: 'unidades',
                        j√≥venes: 'unidades',
                        adultos: 'und.',
                    })}
                </span>
            ),
            span: 2 as const
        }
    ];

    const fechasFields = [
        {
            label: getTextByMode({
                ni√±os: 'üìÖ Fecha de Creaci√≥n',
                j√≥venes: 'üìÖ Creado el',
                adultos: 'Fecha de Creaci√≥n',
            }),
            value: new Date(producto.created_at).toLocaleDateString('es-CO')
        },
        {
            label: getTextByMode({
                ni√±os: 'üîÑ √öltima Actualizaci√≥n',
                j√≥venes: 'üîÑ Actualizado el',
                adultos: '√öltima Actualizaci√≥n',
            }),
            value: new Date(producto.updated_at).toLocaleDateString('es-CO')
        }
    ];

    // Campos para inventarios por almac√©n
    const inventariosAlmacenFields = producto.inventarios?.map(inventario => ({
        label: inventario.almacen.nombre,
        value: (
            <span className={`text-lg font-bold ${
                inventario.stock > 10
                    ? 'text-green-600 dark:text-green-400'
                    : inventario.stock > 5
                      ? 'text-yellow-600 dark:text-yellow-400'
                      : 'text-red-600 dark:text-red-400'
            }`}>
                {inventario.stock} {getTextByMode({
                    ni√±os: 'unidades',
                    j√≥venes: 'unidades',
                    adultos: 'und.',
                })}
            </span>
        )
    })) || [];

    // Campos para promociones
    const promocionesFields = producto.promociones?.map(promocion => ({
        label: promocion.nombre,
        value: (
            <span className="text-lg font-bold text-red-600 dark:text-red-400">
                {promocion.descuento}% {getTextByMode({
                    ni√±os: 'de descuento',
                    j√≥venes: 'de descuento',
                    adultos: 'descuento',
                })}
            </span>
        )
    })) || [];

    return (
        <DashboardLayout
            title={getTextByMode({
                ni√±os: `üì¶ ${producto.nombre}`,
                j√≥venes: `üì¶ ${producto.nombre}`,
                adultos: `Detalles del Producto`,
            })}
        >
            <Head title={`Producto: ${producto.nombre}`} />

            <div className={`space-y-6 ${getModeClasses()}`}>
                <ShowHeader
                    title={getTextByMode({
                        ni√±os: `üì¶ Informaci√≥n de ${producto.nombre}`,
                        j√≥venes: `Detalles de ${producto.nombre}`,
                        adultos: `Informaci√≥n del Producto`,
                    })}
                    description={getTextByMode({
                        ni√±os: '¬°Aqu√≠ est√°n todos los detalles de tu producto!',
                        j√≥venes: 'Informaci√≥n completa del producto',
                        adultos: 'Informaci√≥n detallada del producto',
                    })}
                    editHref={`/productos/${producto.id}/edit`}
                    backHref="/productos"
                    editText={getTextByMode({
                        ni√±os: '‚úèÔ∏è Editar',
                        j√≥venes: 'Editar',
                        adultos: 'Editar',
                    })}
                    backText={getTextByMode({
                        ni√±os: '‚¨ÖÔ∏è Volver',
                        j√≥venes: 'Volver',
                        adultos: 'Volver',
                    })}
                />

                <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
                    {/* Imagen del producto */}
                    <div className="rounded-lg bg-white p-6 shadow dark:bg-gray-800">
                        <h3 className={`mb-4 text-xl font-semibold text-gray-900 dark:text-gray-100 ${getModeClasses()}`}>
                            {getTextByMode({
                                ni√±os: 'üñºÔ∏è Imagen del Producto',
                                j√≥venes: 'üñºÔ∏è Imagen',
                                adultos: 'Imagen del Producto',
                            })}
                        </h3>
                        <div className="flex justify-center">
                            {producto.imagen ? (
                                <img src={producto.imagen} alt={producto.nombre} className="h-auto max-w-full rounded-lg shadow-md" />
                            ) : (
                                <div className="flex h-64 w-64 items-center justify-center rounded-lg bg-gray-200 dark:bg-gray-700">
                                    <span className="text-6xl">{settings.ageMode === 'ni√±os' ? 'üì¶' : 'üñºÔ∏è'}</span>
                                </div>
                            )}
                        </div>
                    </div>

                    {/* Informaci√≥n b√°sica */}
                    <div className="space-y-6">
                        <InfoCard
                            title={getTextByMode({
                                ni√±os: 'üìã Informaci√≥n B√°sica',
                                j√≥venes: 'üìã Informaci√≥n B√°sica',
                                adultos: 'Informaci√≥n B√°sica',
                            })}
                            fields={infoBasicaFields}
                            columns={2}
                        />

                        <InfoCard
                            title={getTextByMode({
                                ni√±os: 'üí∞ Precios',
                                j√≥venes: 'üí∞ Precios',
                                adultos: 'Informaci√≥n de Precios',
                            })}
                            fields={precioPrecioFields}
                            columns={2}
                        />

                        <InfoCard
                            title={getTextByMode({
                                ni√±os: 'üì¶ Stock Total',
                                j√≥venes: 'üì¶ Stock Total',
                                adultos: 'Stock Total',
                            })}
                            fields={stockTotalFields}
                            columns={1}
                        />
                    </div>
                </div>

                <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
                    {/* Inventarios por almac√©n */}
                    {inventariosAlmacenFields.length > 0 && (
                        <InfoCard
                            title={getTextByMode({
                                ni√±os: 'üìä Stock en Almacenes',
                                j√≥venes: 'üìä Stock por Almac√©n',
                                adultos: 'Inventario por Almac√©n',
                            })}
                            fields={inventariosAlmacenFields}
                            columns={2}
                        />
                    )}

                    {/* Promociones */}
                    {promocionesFields.length > 0 && (
                        <InfoCard
                            title={getTextByMode({
                                ni√±os: 'üéâ Promociones',
                                j√≥venes: 'üéâ Promociones Activas',
                                adultos: 'Promociones Activas',
                            })}
                            fields={promocionesFields}
                            columns={1}
                        />
                    )}

                    {/* Fechas */}
                    <InfoCard
                        title={getTextByMode({
                            ni√±os: 'üìÖ Fechas',
                            j√≥venes: 'üìÖ Fechas',
                            adultos: 'Informaci√≥n de Fechas',
                        })}
                        fields={fechasFields}
                        columns={2}
                    />
                </div>
            </div>
        </DashboardLayout>
    );
}
