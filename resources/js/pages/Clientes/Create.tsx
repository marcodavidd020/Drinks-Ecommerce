import { Head, useForm } from '@inertiajs/react';
import DashboardLayout from '@/layouts/DashboardLayout';
import { useAppMode } from '@/contexts/AppModeContext';
import { FormEventHandler } from 'react';
import { FormPage, FormSection, FormButtons } from '@/components/Form';

export default function CreateCliente() {
    const { settings } = useAppMode();
    const { data, setData, post, processing, errors } = useForm({
        user_id: '',
        nombre: '',
        email: '',
        password: '',
        password_confirmation: '',
        nit: '',
        tipo_documento: 'CC',
        direccion: '',
        telefono: '',
        ciudad: '',
        estado: 'activo',
    });

    const getTextByMode = (textos: { ni√±os: string; j√≥venes: string; adultos: string }) => {
        return textos[settings.ageMode as keyof typeof textos] || textos.adultos;
    };

    const getModeClasses = () => {
        switch (settings.ageMode) {
            case 'ni√±os':
                return 'font-comic text-adaptive-kids';
            case 'j√≥venes':
                return 'font-modern text-adaptive-teen';
            default:
                return 'font-classic text-adaptive-adult';
        }
    };

    const submit: FormEventHandler = (e) => {
        e.preventDefault();
        post('/clientes');
    };

    return (
        <DashboardLayout title={getTextByMode({
            ni√±os: '‚ûï ¬°Crear Cliente Nuevo!',
            j√≥venes: '‚ûï Crear Cliente',
            adultos: 'Crear Nuevo Cliente'
        })}>
            <Head title="Crear Cliente" />
            
            <FormPage
                title={getTextByMode({
                    ni√±os: 'üéâ ¬°Crear Cliente S√∫per Genial!',
                    j√≥venes: '‚ú® Crear Nuevo Cliente',
                    adultos: 'Crear Nuevo Cliente'
                })}
                description={getTextByMode({
                    ni√±os: '¬°Completa todos los campos para crear un cliente incre√≠ble!',
                    j√≥venes: 'Completa la informaci√≥n para crear el nuevo cliente',
                    adultos: 'Complete la informaci√≥n requerida para crear el nuevo cliente'
                })}
                backHref="/clientes"
                backText={getTextByMode({
                    ni√±os: '¬°Volver a la lista!',
                    j√≥venes: 'Volver a clientes',
                    adultos: 'Volver a clientes'
                })}
            >
                <form onSubmit={submit} className="space-y-6">
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <FormSection
                            title={getTextByMode({
                                ni√±os: 'üë§ Informaci√≥n Personal',
                                j√≥venes: 'üë§ Datos Personales',
                                adultos: 'Informaci√≥n Personal'
                            })}
                        >
                            <div className="space-y-4">
                                <div>
                                    <label className={`block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 ${getModeClasses()}`}>
                                        {getTextByMode({
                                            ni√±os: 'üìù Nombre Completo *',
                                            j√≥venes: 'üìù Nombre Completo *',
                                            adultos: 'Nombre Completo *'
                                        })}
                                    </label>
                                    <input
                                        type="text"
                                        value={data.nombre}
                                        onChange={(e) => setData('nombre', e.target.value)}
                                        className={`w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-gray-100 ${getModeClasses()}`}
                                        placeholder={getTextByMode({
                                            ni√±os: 'Escribe el nombre completo...',
                                            j√≥venes: 'Nombre del cliente...',
                                            adultos: 'Nombre completo del cliente'
                                        })}
                                        required
                                    />
                                    {errors.nombre && (
                                        <p className="text-red-600 text-sm mt-1">{errors.nombre}</p>
                                    )}
                                </div>

                                <div>
                                    <label className={`block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 ${getModeClasses()}`}>
                                        {getTextByMode({
                                            ni√±os: 'üìß Email *',
                                            j√≥venes: 'üìß Correo Electr√≥nico *',
                                            adultos: 'Correo Electr√≥nico *'
                                        })}
                                    </label>
                                    <input
                                        type="email"
                                        value={data.email}
                                        onChange={(e) => setData('email', e.target.value)}
                                        className={`w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-gray-100 ${getModeClasses()}`}
                                        placeholder={getTextByMode({
                                            ni√±os: 'cliente@ejemplo.com',
                                            j√≥venes: 'correo@ejemplo.com',
                                            adultos: 'cliente@empresa.com'
                                        })}
                                        required
                                    />
                                    {errors.email && (
                                        <p className="text-red-600 text-sm mt-1">{errors.email}</p>
                                    )}
                                </div>

                                <div>
                                    <label className={`block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 ${getModeClasses()}`}>
                                        {getTextByMode({
                                            ni√±os: 'üîí Contrase√±a *',
                                            j√≥venes: 'üîí Contrase√±a *',
                                            adultos: 'Contrase√±a *'
                                        })}
                                    </label>
                                    <input
                                        type="password"
                                        value={data.password}
                                        onChange={(e) => setData('password', e.target.value)}
                                        className={`w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-gray-100 ${getModeClasses()}`}
                                        placeholder={getTextByMode({
                                            ni√±os: 'Una contrase√±a s√∫per secreta...',
                                            j√≥venes: 'Contrase√±a segura...',
                                            adultos: 'M√≠nimo 8 caracteres'
                                        })}
                                        required
                                    />
                                    {errors.password && (
                                        <p className="text-red-600 text-sm mt-1">{errors.password}</p>
                                    )}
                                </div>

                                <div>
                                    <label className={`block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 ${getModeClasses()}`}>
                                        {getTextByMode({
                                            ni√±os: 'üîí Confirma la Contrase√±a *',
                                            j√≥venes: 'üîí Confirmar Contrase√±a *',
                                            adultos: 'Confirmar Contrase√±a *'
                                        })}
                                    </label>
                                    <input
                                        type="password"
                                        value={data.password_confirmation}
                                        onChange={(e) => setData('password_confirmation', e.target.value)}
                                        className={`w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-gray-100 ${getModeClasses()}`}
                                        placeholder={getTextByMode({
                                            ni√±os: 'Repite la contrase√±a...',
                                            j√≥venes: 'Confirma la contrase√±a...',
                                            adultos: 'Confirme la contrase√±a'
                                        })}
                                        required
                                    />
                                    {errors.password_confirmation && (
                                        <p className="text-red-600 text-sm mt-1">{errors.password_confirmation}</p>
                                    )}
                                </div>
                            </div>
                        </FormSection>

                        <FormSection
                            title={getTextByMode({
                                ni√±os: 'üìÑ Informaci√≥n Adicional',
                                j√≥venes: 'üìÑ Informaci√≥n Complementaria',
                                adultos: 'Informaci√≥n Complementaria'
                            })}
                        >
                            <div className="space-y-4">
                                <div>
                                    <label className={`block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 ${getModeClasses()}`}>
                                        {getTextByMode({
                                            ni√±os: 'üÜî Tipo de Documento *',
                                            j√≥venes: 'üÜî Tipo Documento *',
                                            adultos: 'Tipo de Documento *'
                                        })}
                                    </label>
                                    <select
                                        value={data.tipo_documento}
                                        onChange={(e) => setData('tipo_documento', e.target.value)}
                                        className={`w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-gray-100 ${getModeClasses()}`}
                                        required
                                    >
                                        <option value="CC">{getTextByMode({
                                            ni√±os: 'ü™™ C√©dula de Ciudadan√≠a',
                                            j√≥venes: 'C√©dula de Ciudadan√≠a',
                                            adultos: 'C√©dula de Ciudadan√≠a'
                                        })}</option>
                                        <option value="CE">{getTextByMode({
                                            ni√±os: 'ü™™ C√©dula de Extranjer√≠a',
                                            j√≥venes: 'C√©dula de Extranjer√≠a',
                                            adultos: 'C√©dula de Extranjer√≠a'
                                        })}</option>
                                        <option value="NIT">{getTextByMode({
                                            ni√±os: 'üè¢ NIT',
                                            j√≥venes: 'NIT',
                                            adultos: 'NIT'
                                        })}</option>
                                        <option value="Pasaporte">{getTextByMode({
                                            ni√±os: '‚úàÔ∏è Pasaporte',
                                            j√≥venes: 'Pasaporte',
                                            adultos: 'Pasaporte'
                                        })}</option>
                                    </select>
                                    {errors.tipo_documento && (
                                        <p className="text-red-600 text-sm mt-1">{errors.tipo_documento}</p>
                                    )}
                                </div>

                                <div>
                                    <label className={`block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 ${getModeClasses()}`}>
                                        {getTextByMode({
                                            ni√±os: 'üî¢ N√∫mero de Documento *',
                                            j√≥venes: 'üî¢ No. Documento *',
                                            adultos: 'N√∫mero de Documento *'
                                        })}
                                    </label>
                                    <input
                                        type="text"
                                        value={data.nit}
                                        onChange={(e) => setData('nit', e.target.value)}
                                        className={`w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-gray-100 ${getModeClasses()}`}
                                        placeholder={getTextByMode({
                                            ni√±os: 'Escribe el n√∫mero aqu√≠...',
                                            j√≥venes: 'Ej: 1234567890',
                                            adultos: 'N√∫mero de identificaci√≥n'
                                        })}
                                        required
                                    />
                                    {errors.nit && (
                                        <p className="text-red-600 text-sm mt-1">{errors.nit}</p>
                                    )}
                                </div>

                                <div>
                                    <label className={`block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 ${getModeClasses()}`}>
                                        {getTextByMode({
                                            ni√±os: 'üì± Tel√©fono',
                                            j√≥venes: 'üì± Tel√©fono',
                                            adultos: 'Tel√©fono de Contacto'
                                        })}
                                    </label>
                                    <input
                                        type="tel"
                                        value={data.telefono}
                                        onChange={(e) => setData('telefono', e.target.value)}
                                        className={`w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-gray-100 ${getModeClasses()}`}
                                        placeholder={getTextByMode({
                                            ni√±os: 'Ej: 300 123 4567',
                                            j√≥venes: '300 123 4567',
                                            adultos: 'Tel√©fono o celular'
                                        })}
                                    />
                                    {errors.telefono && (
                                        <p className="text-red-600 text-sm mt-1">{errors.telefono}</p>
                                    )}
                                </div>

                                <div>
                                    <label className={`block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 ${getModeClasses()}`}>
                                        {getTextByMode({
                                            ni√±os: 'üèôÔ∏è Ciudad',
                                            j√≥venes: 'üèôÔ∏è Ciudad',
                                            adultos: 'Ciudad'
                                        })}
                                    </label>
                                    <input
                                        type="text"
                                        value={data.ciudad}
                                        onChange={(e) => setData('ciudad', e.target.value)}
                                        className={`w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-gray-100 ${getModeClasses()}`}
                                        placeholder={getTextByMode({
                                            ni√±os: '¬øEn qu√© ciudad vive?',
                                            j√≥venes: 'Ciudad de residencia',
                                            adultos: 'Ciudad de residencia'
                                        })}
                                    />
                                    {errors.ciudad && (
                                        <p className="text-red-600 text-sm mt-1">{errors.ciudad}</p>
                                    )}
                                </div>

                                <div>
                                    <label className={`block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 ${getModeClasses()}`}>
                                        {getTextByMode({
                                            ni√±os: 'üìç Direcci√≥n',
                                            j√≥venes: 'üìç Direcci√≥n',
                                            adultos: 'Direcci√≥n'
                                        })}
                                    </label>
                                    <textarea
                                        value={data.direccion}
                                        onChange={(e) => setData('direccion', e.target.value)}
                                        rows={3}
                                        className={`w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-gray-100 ${getModeClasses()}`}
                                        placeholder={getTextByMode({
                                            ni√±os: 'Escribe la direcci√≥n completa aqu√≠...',
                                            j√≥venes: 'Direcci√≥n completa',
                                            adultos: 'Direcci√≥n completa'
                                        })}
                                    />
                                    {errors.direccion && (
                                        <p className="text-red-600 text-sm mt-1">{errors.direccion}</p>
                                    )}
                                </div>
                            </div>
                        </FormSection>
                    </div>

                    <FormButtons
                        isProcessing={processing}
                        submitLabel={getTextByMode({
                            ni√±os: 'üíæ ¬°Crear Cliente!',
                            j√≥venes: 'üíæ Crear Cliente',
                            adultos: 'Crear Cliente',
                        })}
                        cancelHref="/clientes"
                        cancelLabel={getTextByMode({
                            ni√±os: '‚ùå Cancelar',
                            j√≥venes: 'Cancelar',
                            adultos: 'Cancelar',
                        })}
                    />
                </form>
            </FormPage>
        </DashboardLayout>
    );
} 