import { FormButtons, FormPage, InputField, SelectField } from '@/components/Form';
import { useAppModeText } from '@/hooks/useAppModeText';
import DashboardLayout from '@/layouts/DashboardLayout';
import { Head, useForm } from '@inertiajs/react';
import { FormEvent } from 'react';

export default function ClienteCreate() {
    const { getTextByMode, getModeClasses } = useAppModeText();

    const { data, setData, post, processing, errors } = useForm({
        nombre: '',
        email: '',
        celular: '',
        nit: '',
        password: '',
        password_confirmation: '',
        estado: 'activo',
    });

    const submit = (e: FormEvent) => {
        e.preventDefault();
        post('/clientes');
    };

    return (
        <DashboardLayout
            title={getTextByMode({
                ni√±os: '‚ûï ¬°Crear Nuevo Amigo!',
                j√≥venes: '‚ûï Crear Cliente',
                adultos: 'Crear Nuevo Cliente',
            })}
        >
            <Head title="Crear Cliente" />

            <FormPage
                title={getTextByMode({
                    ni√±os: 'üéâ ¬°Crear un Nuevo Amigo Cliente!',
                    j√≥venes: '‚ú® Crear Nuevo Cliente',
                    adultos: 'Crear Nuevo Cliente',
                })}
                description={getTextByMode({
                    ni√±os: '¬°Completa la informaci√≥n de tu nuevo amigo!',
                    j√≥venes: 'Completa la informaci√≥n del nuevo cliente',
                    adultos: 'Complete la informaci√≥n del nuevo cliente en el sistema',
                })}
                backHref="/clientes"
                backText={getTextByMode({
                    ni√±os: '¬°Volver a amigos!',
                    j√≥venes: 'Volver a clientes',
                    adultos: 'Volver a clientes',
                })}
            >
                <form onSubmit={submit} className="space-y-6">
                    <div className="rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
                        <h2 className={`mb-4 text-lg font-medium text-gray-900 dark:text-gray-100 ${getModeClasses()}`}>
                            {getTextByMode({
                                ni√±os: 'üë§ Informaci√≥n Personal',
                                j√≥venes: 'üë§ Datos Personales',
                                adultos: 'Informaci√≥n Personal',
                            })}
                        </h2>
                        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                            <InputField
                                label={getTextByMode({
                                    ni√±os: 'üòä Nombre del amigo',
                                    j√≥venes: 'üë§ Nombre completo',
                                    adultos: 'Nombre completo',
                                })}
                                type="text"
                                value={data.nombre}
                                onChange={(e) => setData('nombre', e.target.value)}
                                placeholder={getTextByMode({
                                    ni√±os: 'Escribe el nombre de tu amigo...',
                                    j√≥venes: 'Ingresa el nombre completo',
                                    adultos: 'Ingrese el nombre completo del cliente',
                                })}
                                error={errors.nombre}
                                required
                            />

                            <InputField
                                label={getTextByMode({
                                    ni√±os: 'üìß Email del amigo',
                                    j√≥venes: 'üìß Correo electr√≥nico',
                                    adultos: 'Correo electr√≥nico',
                                })}
                                type="email"
                                value={data.email}
                                onChange={(e) => setData('email', e.target.value)}
                                placeholder={getTextByMode({
                                    ni√±os: 'email@ejemplo.com',
                                    j√≥venes: 'correo@ejemplo.com',
                                    adultos: 'correo@empresa.com',
                                })}
                                error={errors.email}
                                required
                            />

                            <InputField
                                label={getTextByMode({
                                    ni√±os: 'üì± Celular del amigo',
                                    j√≥venes: 'üì± N√∫mero celular',
                                    adultos: 'N√∫mero celular',
                                })}
                                type="tel"
                                value={data.celular}
                                onChange={(e) => setData('celular', e.target.value)}
                                placeholder={getTextByMode({
                                    ni√±os: 'üì± 3001234567',
                                    j√≥venes: '3001234567',
                                    adultos: '+57 300 123 4567',
                                })}
                                error={errors.celular}
                            />

                            <InputField
                                label={getTextByMode({
                                    ni√±os: 'üÜî Documento del amigo',
                                    j√≥venes: 'üÜî NIT/Documento',
                                    adultos: 'NIT/Documento de identidad',
                                })}
                                type="text"
                                value={data.nit}
                                onChange={(e) => setData('nit', e.target.value)}
                                placeholder={getTextByMode({
                                    ni√±os: '12345678',
                                    j√≥venes: '12345678-9',
                                    adultos: '12345678-9 o CC 12345678',
                                })}
                                error={errors.nit}
                            />
                        </div>
                    </div>

                    <div className="rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
                        <h2 className={`mb-4 text-lg font-medium text-gray-900 dark:text-gray-100 ${getModeClasses()}`}>
                            {getTextByMode({
                                ni√±os: 'üîê Informaci√≥n de Acceso',
                                j√≥venes: 'üîê Datos de Acceso',
                                adultos: 'Informaci√≥n de Acceso',
                            })}
                        </h2>
                        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                            <SelectField
                                label={getTextByMode({
                                    ni√±os: 'üö¶ Estado del amigo',
                                    j√≥venes: 'üö¶ Estado',
                                    adultos: 'Estado',
                                })}
                                value={data.estado}
                                onChange={(e) => setData('estado', e.target.value)}
                                options={[
                                    { value: 'activo', label: getTextByMode({
                                        ni√±os: 'üü¢ Activo',
                                        j√≥venes: 'üü¢ Activo',
                                        adultos: 'Activo',
                                    })},
                                    { value: 'inactivo', label: getTextByMode({
                                        ni√±os: 'üî¥ Inactivo',
                                        j√≥venes: 'üî¥ Inactivo',
                                        adultos: 'Inactivo',
                                    })}
                                ]}
                                error={errors.estado}
                                required
                            />

                            <InputField
                                label={getTextByMode({
                                    ni√±os: 'üîí Contrase√±a del amigo',
                                    j√≥venes: 'üîí Contrase√±a',
                                    adultos: 'Contrase√±a',
                                })}
                                type="password"
                                value={data.password}
                                onChange={(e) => setData('password', e.target.value)}
                                placeholder={getTextByMode({
                                    ni√±os: 'üîí Contrase√±a segura...',
                                    j√≥venes: 'Contrase√±a segura',
                                    adultos: 'M√≠nimo 8 caracteres',
                                })}
                                error={errors.password}
                                required
                            />

                            <InputField
                                label={getTextByMode({
                                    ni√±os: 'üîí Confirmar contrase√±a',
                                    j√≥venes: 'üîí Confirmar contrase√±a',
                                    adultos: 'Confirmar contrase√±a',
                                })}
                                type="password"
                                value={data.password_confirmation}
                                onChange={(e) => setData('password_confirmation', e.target.value)}
                                placeholder={getTextByMode({
                                    ni√±os: 'üîí Repite la contrase√±a...',
                                    j√≥venes: 'Confirma la contrase√±a',
                                    adultos: 'Repita la contrase√±a',
                                })}
                                error={errors.password_confirmation}
                                required
                            />
                        </div>
                    </div>

                    <FormButtons
                        isProcessing={processing}
                        submitLabel={getTextByMode({
                            ni√±os: 'üíæ ¬°Crear Amigo!',
                            j√≥venes: 'üíæ Crear Cliente',
                            adultos: 'Crear Cliente',
                        })}
                        cancelHref="/clientes"
                        cancelLabel={getTextByMode({
                            ni√±os: '‚ùå Cancelar',
                            j√≥venes: 'Cancelar',
                            adultos: 'Cancelar',
                        })}
                    />
                </form>
            </FormPage>
        </DashboardLayout>
    );
}
