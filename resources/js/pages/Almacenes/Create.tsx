import { FormButtons, FormPage, FormSection } from '@/components/Form';
import { useAppMode } from '@/contexts/AppModeContext';
import DashboardLayout from '@/layouts/DashboardLayout';
import { Head, useForm } from '@inertiajs/react';
import { FormEventHandler } from 'react';

export default function AlmacenCreate() {
    const { settings } = useAppMode();

    const { data, setData, post, processing, errors } = useForm({
        nombre: '',
        descripcion: '',
        ubicacion: '',
    });

    const getTextByMode = (textos: { ni√±os: string; j√≥venes: string; adultos: string }) => {
        return textos[settings.ageMode as keyof typeof textos] || textos.adultos;
    };

    const getModeClasses = () => {
        switch (settings.ageMode) {
            case 'ni√±os':
                return 'font-comic text-adaptive-kids';
            case 'j√≥venes':
                return 'font-modern text-adaptive-teen';
            default:
                return 'font-classic text-adaptive-adult';
        }
    };

    const submit: FormEventHandler = (e) => {
        e.preventDefault();
        post('/almacenes');
    };

    // Configuraci√≥n de campos para FormSection
    const almacenFields = [
        {
            type: 'text' as const,
            name: 'nombre',
            label: getTextByMode({
                ni√±os: 'üìù Nombre del Almac√©n *',
                j√≥venes: 'üìù Nombre *',
                adultos: 'Nombre del Almac√©n *',
            }),
            value: data.nombre,
            onChange: (value: string) => setData('nombre', value),
            placeholder: getTextByMode({
                ni√±os: 'Ej: Almac√©n Central, Bodega Norte...',
                j√≥venes: 'Nombre del almac√©n',
                adultos: 'Ingrese el nombre del almac√©n',
            }),
            required: true,
            error: errors.nombre
        },
        {
            type: 'text' as const,
            name: 'ubicacion',
            label: getTextByMode({
                ni√±os: 'üìç Ubicaci√≥n del Almac√©n *',
                j√≥venes: 'üìç Ubicaci√≥n *',
                adultos: 'Ubicaci√≥n del Almac√©n *',
            }),
            value: data.ubicacion,
            onChange: (value: string) => setData('ubicacion', value),
            placeholder: getTextByMode({
                ni√±os: 'Ej: Calle 123, Ciudad, Zona Este...',
                j√≥venes: 'Direcci√≥n o ubicaci√≥n',
                adultos: 'Ingrese la direcci√≥n o ubicaci√≥n del almac√©n',
            }),
            required: true,
            error: errors.ubicacion
        },
        {
            type: 'textarea' as const,
            name: 'descripcion',
            label: getTextByMode({
                ni√±os: 'üìù Descripci√≥n',
                j√≥venes: 'üìù Descripci√≥n',
                adultos: 'Descripci√≥n',
            }),
            value: data.descripcion,
            onChange: (value: string) => setData('descripcion', value),
            placeholder: getTextByMode({
                ni√±os: 'Cuenta algo sobre este almac√©n...',
                j√≥venes: 'Descripci√≥n del almac√©n',
                adultos: 'Ingrese una descripci√≥n para el almac√©n',
            }),
            rows: 4,
            span: 2 as const,
            error: errors.descripcion
        }
    ];

    return (
        <DashboardLayout
            title={getTextByMode({
                ni√±os: '‚ûï ¬°Crear Almac√©n Nuevo!',
                j√≥venes: '‚ûï Crear Almac√©n',
                adultos: 'Crear Nuevo Almac√©n',
            })}
        >
            <Head title="Crear Almac√©n" />

            <FormPage
                title={getTextByMode({
                    ni√±os: 'üè¨ ¬°Crear Almac√©n S√∫per Genial!',
                    j√≥venes: '‚ú® Crear Nuevo Almac√©n',
                    adultos: 'Crear Nuevo Almac√©n',
                })}
                description={getTextByMode({
                    ni√±os: '¬°Completa los campos para crear un almac√©n incre√≠ble!',
                    j√≥venes: 'Completa la informaci√≥n para crear el nuevo almac√©n',
                    adultos: 'Complete la informaci√≥n requerida para crear el nuevo almac√©n',
                })}
                backHref="/almacenes"
                backText={getTextByMode({
                    ni√±os: '¬°Volver a la lista!',
                    j√≥venes: 'Volver a almacenes',
                    adultos: 'Volver a almacenes',
                })}
            >
                <form onSubmit={submit} className="space-y-6">
                    <FormSection
                        title={getTextByMode({
                            ni√±os: 'üìù Informaci√≥n del Almac√©n',
                            j√≥venes: 'üìù Datos del Almac√©n',
                            adultos: 'Informaci√≥n del Almac√©n',
                        })}
                        fields={almacenFields}
                        columns={2}
                    />

                    <FormButtons
                        isProcessing={processing}
                        submitLabel={getTextByMode({
                            ni√±os: 'üíæ ¬°Crear Almac√©n!',
                            j√≥venes: 'üíæ Crear Almac√©n',
                            adultos: 'Crear Almac√©n',
                        })}
                        cancelHref="/almacenes"
                        cancelLabel={getTextByMode({
                            ni√±os: '‚ùå Cancelar',
                            j√≥venes: 'Cancelar',
                            adultos: 'Cancelar',
                        })}
                    />
                </form>
            </FormPage>
        </DashboardLayout>
    );
} 