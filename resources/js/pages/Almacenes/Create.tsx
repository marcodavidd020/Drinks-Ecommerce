import { FormButtons, FormPage, InputField, TextareaField } from '@/components/Form';
import { useAppModeText } from '@/hooks/useAppModeText';
import DashboardLayout from '@/layouts/DashboardLayout';
import { Head, useForm } from '@inertiajs/react';
import { FormEventHandler } from 'react';

export default function AlmacenCreate() {
    const { getTextByMode, getModeClasses } = useAppModeText();

    const { data, setData, post, processing, errors } = useForm({
        nombre: '',
        descripcion: '',
        ubicacion: '',
    });

    const submit: FormEventHandler = (e) => {
        e.preventDefault();
        post('/almacenes');
    };

    return (
        <DashboardLayout
            title={getTextByMode({
                ni√±os: '‚ûï ¬°Crear Almac√©n Nuevo!',
                j√≥venes: '‚ûï Crear Almac√©n',
                adultos: 'Crear Nuevo Almac√©n',
            })}
        >
            <Head title="Crear Almac√©n" />

            <FormPage
                title={getTextByMode({
                    ni√±os: 'üè¨ ¬°Crear Almac√©n S√∫per Genial!',
                    j√≥venes: '‚ú® Crear Nuevo Almac√©n',
                    adultos: 'Crear Nuevo Almac√©n',
                })}
                description={getTextByMode({
                    ni√±os: '¬°Completa los campos para crear un almac√©n incre√≠ble!',
                    j√≥venes: 'Completa la informaci√≥n para crear el nuevo almac√©n',
                    adultos: 'Complete la informaci√≥n requerida para crear el nuevo almac√©n',
                })}
                backHref="/almacenes"
                backText={getTextByMode({
                    ni√±os: '¬°Volver a la lista!',
                    j√≥venes: 'Volver a almacenes',
                    adultos: 'Volver a almacenes',
                })}
            >
                <form onSubmit={submit} className="space-y-6">
                    <div className="rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
                        <h2 className={`mb-4 text-lg font-medium text-gray-900 dark:text-gray-100 ${getModeClasses()}`}>
                            {getTextByMode({
                                ni√±os: 'üìù Informaci√≥n del Almac√©n',
                                j√≥venes: 'üìù Datos del Almac√©n',
                                adultos: 'Informaci√≥n del Almac√©n',
                            })}
                        </h2>
                        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                            <InputField
                                label={getTextByMode({
                                    ni√±os: 'üìù Nombre del Almac√©n',
                                    j√≥venes: 'üìù Nombre',
                                    adultos: 'Nombre del Almac√©n',
                                })}
                                type="text"
                                value={data.nombre}
                                onChange={(e) => setData('nombre', e.target.value)}
                                placeholder={getTextByMode({
                                    ni√±os: 'Ej: Almac√©n Central, Bodega Norte...',
                                    j√≥venes: 'Nombre del almac√©n',
                                    adultos: 'Ingrese el nombre del almac√©n',
                                })}
                                error={errors.nombre}
                                required
                            />

                            <InputField
                                label={getTextByMode({
                                    ni√±os: 'üìç Ubicaci√≥n del Almac√©n',
                                    j√≥venes: 'üìç Ubicaci√≥n',
                                    adultos: 'Ubicaci√≥n del Almac√©n',
                                })}
                                type="text"
                                value={data.ubicacion}
                                onChange={(e) => setData('ubicacion', e.target.value)}
                                placeholder={getTextByMode({
                                    ni√±os: 'Ej: Calle 123, Ciudad, Zona Este...',
                                    j√≥venes: 'Direcci√≥n o ubicaci√≥n',
                                    adultos: 'Ingrese la direcci√≥n o ubicaci√≥n del almac√©n',
                                })}
                                error={errors.ubicacion}
                                required
                            />

                            <TextareaField
                                label={getTextByMode({
                                    ni√±os: 'üìù Descripci√≥n',
                                    j√≥venes: 'üìù Descripci√≥n',
                                    adultos: 'Descripci√≥n',
                                })}
                                value={data.descripcion}
                                onChange={(e) => setData('descripcion', e.target.value)}
                                rows={4}
                                placeholder={getTextByMode({
                                    ni√±os: 'Cuenta algo sobre este almac√©n...',
                                    j√≥venes: 'Descripci√≥n del almac√©n',
                                    adultos: 'Ingrese una descripci√≥n para el almac√©n',
                                })}
                                error={errors.descripcion}
                                containerClassName="sm:col-span-2"
                            />
                        </div>
                    </div>

                    <FormButtons
                        isProcessing={processing}
                        submitLabel={getTextByMode({
                            ni√±os: 'üíæ ¬°Crear Almac√©n!',
                            j√≥venes: 'üíæ Crear Almac√©n',
                            adultos: 'Crear Almac√©n',
                        })}
                        cancelHref="/almacenes"
                        cancelLabel={getTextByMode({
                            ni√±os: '‚ùå Cancelar',
                            j√≥venes: 'Cancelar',
                            adultos: 'Cancelar',
                        })}
                    />
                </form>
            </FormPage>
        </DashboardLayout>
    );
}
